// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoApi.Infrastructure;

#nullable disable

namespace TodoApi.Migrations
{
    [DbContext(typeof(IPOContext))]
    [Migration("20241123133648_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoApi.Models.Auth.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("boolean");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("TodoApi.Models.OperationRequest.OperationRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperationTypeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PacientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OperationRequests", (string)null);
                });

            modelBuilder.Entity("TodoApi.Models.OperationType.OperationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<List<TimeSpan>>("EstimatedDuration")
                        .IsRequired()
                        .HasColumnType("interval[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<List<string>>("RequiredStaffBySpecialization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("TodoApi.Models.Patient.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("gender")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("dateOfBirth");

                    b.HasIndex("gender");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("TodoApi.Models.RequestsLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangeDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<string>("OperationRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationRequestLogs", (string)null);
                });

            modelBuilder.Entity("TodoApi.Models.Staff.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("TodoApi.Models.StaffSchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("schedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StaffSchedules");
                });

            modelBuilder.Entity("TodoApi.Models.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("Role")
                        .HasMaxLength(30)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TodoApi.Models.Patient.Patient", b =>
                {
                    b.OwnsOne("TodoApi.Models.Patient.AppointmentHistory", "appointmentHistory", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<List<string>>("appointments")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("TodoApi.Models.Patient.ContactInformation", "contactInformation", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("contactInformation")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("TodoApi.Models.Patient.EmergencyContact", "emergencyContact", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("emergencyContact")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("TodoApi.Models.Patient.MedicalConditions", "medicalConditions", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<List<string>>("medicalConditions")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("TodoApi.DTOs.User.UserDTO", "user", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("UserEmail");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("UserId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("UserName");

                            b1.Property<string>("Role")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("appointmentHistory")
                        .IsRequired();

                    b.Navigation("contactInformation")
                        .IsRequired();

                    b.Navigation("emergencyContact")
                        .IsRequired();

                    b.Navigation("medicalConditions")
                        .IsRequired();

                    b.Navigation("user")
                        .IsRequired();
                });

            modelBuilder.Entity("TodoApi.Models.Staff.Staff", b =>
                {
                    b.OwnsOne("AvailabilitySlots", "AvailabilitySlots", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("text");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("TodoApi.Models.Shared.Phone", "Phone", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("text");

                            b1.Property<string>("phoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("TodoApi.Models.Staff.Specialization", "Specialization", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("text");

                            b1.Property<string>("Area")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("TodoApi.DTOs.User.UserDTO", "user", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("text");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("UserEmail");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("UserId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("UserName");

                            b1.Property<string>("Role")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.Navigation("AvailabilitySlots")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Specialization")
                        .IsRequired();

                    b.Navigation("user")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
